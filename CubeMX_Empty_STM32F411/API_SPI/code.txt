#include <stdint.h>

// Base addresses for relevant peripherals
#define NVIC_IPR_BASE        0xE000E400   // Base address of NVIC priority registers
#define NVIC_ISER_BASE       0xE000E100   // Base address of NVIC interrupt set-enable registers
#define SYSCFG_BASE          0x40013800   // Base address of SYSCFG registers
#define EXTI_BASE            0x40013C00   // Base address of EXTI registers
#define RCC_BASE             0x40023800   // Base address of RCC registers
#define GPIOA_BASE           0x40020000   // Base address of GPIOA
#define GPIOC_BASE           0x40020800   // Base address of GPIOC

// Register offsets
#define RCC_APB2ENR          (*((volatile uint32_t *)(RCC_BASE + 0x44)))  // APB2 peripheral clock enable register
#define RCC_AHB1ENR          (*((volatile uint32_t *)(RCC_BASE + 0x30)))  // AHB1 peripheral clock enable register
#define SYSCFG_EXTICR2       (*((volatile uint32_t *)(SYSCFG_BASE + 0x0C))) // SYSCFG external interrupt configuration register 2
#define EXTI_IMR             (*((volatile uint32_t *)(EXTI_BASE + 0x00)))  // Interrupt mask register
#define EXTI_FTSR            (*((volatile uint32_t *)(EXTI_BASE + 0x0C)))  // Falling trigger selection register
#define EXTI_PR              (*((volatile uint32_t *)(EXTI_BASE + 0x14)))  // Pending register
#define NVIC_ISER0           (*((volatile uint32_t *)(NVIC_ISER_BASE + 0x00))) // NVIC Interrupt Set-Enable Register 0
#define NVIC_IPR23           (*((volatile uint8_t *)(NVIC_IPR_BASE + 23))) // NVIC priority register for IRQ 23
#define GPIOA_MODER          (*((volatile uint32_t *)(GPIOA_BASE + 0x00))) // GPIOA mode register
#define GPIOC_MODER          (*((volatile uint32_t *)(GPIOC_BASE + 0x00))) // GPIOC mode register
#define GPIOC_ODR            (*((volatile uint32_t *)(GPIOC_BASE + 0x14))) // GPIOC output data register
#define GPIOA_IDR            (*((volatile uint32_t *)(GPIOA_BASE + 0x10))) // GPIOA input data register

void configure_PA7_interrupt(void) {
    // Step 1: Enable SYSCFG clock and GPIO clocks
    RCC_APB2ENR |= (1 << 14); // Enable SYSCFG clock (bit 14)
    RCC_AHB1ENR |= (1 << 0);  // Enable GPIOA clock (bit 0)
    RCC_AHB1ENR |= (1 << 2);  // Enable GPIOC clock (bit 2)

    // Step 2: Configure PA7 as input
    GPIOA_MODER &= ~(3 << (7 * 2)); // Clear mode bits for PA7 (input mode)

    // Step 3: Configure PC13 as output (for LED)
    GPIOC_MODER &= ~(3 << (13 * 2)); // Clear mode bits for PC13
    GPIOC_MODER |= (1 << (13 * 2));  // Set PC13 as output

    // Step 4: Map PA7 to EXTI Line 7
    SYSCFG_EXTICR2 &= ~(0xF << 12);  // Clear bits for EXTI7 (bits 12-15 in EXTICR2)
    SYSCFG_EXTICR2 |= (0x0 << 12);   // Set PA7 (0x0 corresponds to PA)

    // Step 5: Configure EXTI Line 7
    EXTI_IMR |= (1 << 7);            // Enable interrupt request on EXTI Line 7
    EXTI_FTSR |= (1 << 7);           // Enable falling-edge trigger for EXTI Line 7

    // Step 6: Set NVIC priority for EXTI9_5_IRQn (IRQ 23)
    NVIC_IPR23 = (3 << 4);           // Set priority to 3 (high nibble)

    // Step 7: Enable IRQ 23 in NVIC
    NVIC_ISER0 |= (1 << 23);         // Enable IRQ 23 (EXTI9_5_IRQn)
}

// EXTI9_5 IRQ handler
void EXTI9_5_IRQHandler(void) {
    if (EXTI_PR & (1 << 7)) { // Check if the interrupt is from EXTI Line 7
        EXTI_PR |= (1 << 7);  // Clear the interrupt pending bit for EXTI Line 7
        GPIOC_ODR ^= (1 << 13); // Toggle LED on PC13
    }
}

int main(void) {
    configure_PA7_interrupt();

    while (1) {
        // Main loop does nothing, interrupt handles the logic
    }
}
